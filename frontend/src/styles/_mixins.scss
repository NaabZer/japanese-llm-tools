// src/styles/_mixins.scss
@use 'variables' as vars;
@use "sass:color";


// Media query mixin for responsiveness
@mixin breakpoint($point) {
  @if $point == sm {
    @media (min-width: 576px) { @content; }
  } @else if $point == md {
    @media (min-width: 768px) { @content; }
  } @else if $point == lg {
    @media (min-width: 992px) { @content; }
  } @else if $point == xl {
    @media (min-width: 1200px) { @content; }
  } @else {
    @media ($point) { @content; } // Allows custom media queries
  }
}

@mixin responsive-property($property, $values-map) {
  $default-value: null;
  $first-key: null;

  // Extract the default (first) value for mobile-first approach
  @each $key, $value in $values-map {
    @if $default-value == null {
      $default-value: $value;
      $first-key: $key;
    }
  }

  // Apply the default value outside any media query
  #{$property}: $default-value;

  // Iterate through the map and apply values at each breakpoint
  @each $key, $value in $values-map {
    // Skip the first key, as its value is already applied as default
    @if $key != $first-key {
      @include breakpoint($key) {
        #{$property}: $value;
      }
    }
  }
}

@mixin button-style($bg-color, $text-color: white) {
  background-color: $bg-color;
  color: $text-color;
  padding: vars.$spacing-sm vars.$spacing-md;
  border: none;
  border-radius: vars.$border-radius;
  cursor: pointer;
  font-size: vars.$font-size-base;
  transition: background-color 0.2s ease-in-out;

  &:hover {
    background-color: color.adjust($bg-color, $lightness: -10%); // SASS color function
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}
