/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as Input_typeRouteRouteImport } from './routes/_input_type/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Input_typeSentencesRouteImport } from './routes/_input_type/sentences'

const Input_typeRouteRoute = Input_typeRouteRouteImport.update({
  id: '/_input_type',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Input_typeSentencesRoute = Input_typeSentencesRouteImport.update({
  id: '/sentences',
  path: '/sentences',
  getParentRoute: () => Input_typeRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sentences': typeof Input_typeSentencesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sentences': typeof Input_typeSentencesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_input_type': typeof Input_typeRouteRouteWithChildren
  '/_input_type/sentences': typeof Input_typeSentencesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sentences'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sentences'
  id: '__root__' | '/' | '/_input_type' | '/_input_type/sentences'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Input_typeRouteRoute: typeof Input_typeRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_input_type': {
      id: '/_input_type'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Input_typeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_input_type/sentences': {
      id: '/_input_type/sentences'
      path: '/sentences'
      fullPath: '/sentences'
      preLoaderRoute: typeof Input_typeSentencesRouteImport
      parentRoute: typeof Input_typeRouteRoute
    }
  }
}

interface Input_typeRouteRouteChildren {
  Input_typeSentencesRoute: typeof Input_typeSentencesRoute
}

const Input_typeRouteRouteChildren: Input_typeRouteRouteChildren = {
  Input_typeSentencesRoute: Input_typeSentencesRoute,
}

const Input_typeRouteRouteWithChildren = Input_typeRouteRoute._addFileChildren(
  Input_typeRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Input_typeRouteRoute: Input_typeRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
